// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, email, password, name, role, active, campusid, disciplineid
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING
  id, email, name, role, active, campusid, disciplineid, created, updated
`

type CreateUserParams struct {
	ID           string `json:"id"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	Name         string `json:"name"`
	Role         string `json:"role"`
	Active       int64  `json:"active"`
	Campusid     int64  `json:"campusid"`
	Disciplineid int64  `json:"disciplineid"`
}

type CreateUserRow struct {
	ID           string `json:"id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	Role         string `json:"role"`
	Active       int64  `json:"active"`
	Campusid     int64  `json:"campusid"`
	Disciplineid int64  `json:"disciplineid"`
	Created      string `json:"created"`
	Updated      string `json:"updated"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Role,
		arg.Active,
		arg.Campusid,
		arg.Disciplineid,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Role,
		&i.Active,
		&i.Campusid,
		&i.Disciplineid,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
  id, email, name, role, active, campusid, disciplineid, created, updated
FROM users
WHERE id = ?
LIMIT 1
`

type GetUserRow struct {
	ID           string `json:"id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	Role         string `json:"role"`
	Active       int64  `json:"active"`
	Campusid     int64  `json:"campusid"`
	Disciplineid int64  `json:"disciplineid"`
	Created      string `json:"created"`
	Updated      string `json:"updated"`
}

func (q *Queries) GetUser(ctx context.Context, id string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Role,
		&i.Active,
		&i.Campusid,
		&i.Disciplineid,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, email, name, role, active, campusid, disciplineid, created, updated
FROM users
ORDER BY created DESC
LIMIT ?2 OFFSET ?1
`

type ListUsersParams struct {
	Offset int64 `json:"offset"`
	Limit  int64 `json:"limit"`
}

type ListUsersRow struct {
	ID           string `json:"id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	Role         string `json:"role"`
	Active       int64  `json:"active"`
	Campusid     int64  `json:"campusid"`
	Disciplineid int64  `json:"disciplineid"`
	Created      string `json:"created"`
	Updated      string `json:"updated"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Role,
			&i.Active,
			&i.Campusid,
			&i.Disciplineid,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
