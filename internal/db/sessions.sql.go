// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, userid, expires_at)
VALUES (?1, ?2, ?3)
RETURNING id, userid, created_at, last_seen, expires_at
`

type CreateSessionParams struct {
	ID        string `json:"id"`
	Userid    string `json:"userid"`
	ExpiresAt string `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.Userid, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.CreatedAt,
		&i.LastSeen,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at < strftime('%Y-%m-%dT%H:%M:%fZ','now')
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = ?1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM sessions WHERE userid = ?1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userid string) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userid)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, userid, created_at, last_seen, expires_at FROM sessions
WHERE id = ?1
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.CreatedAt,
		&i.LastSeen,
		&i.ExpiresAt,
	)
	return i, err
}

const slideSession = `-- name: SlideSession :one
UPDATE sessions
SET last_seen = strftime('%Y-%m-%dT%H:%M:%fZ','now'),
    expires_at = ?1
WHERE id = ?2
RETURNING id, userid, created_at, last_seen, expires_at
`

type SlideSessionParams struct {
	ExpiresAt string `json:"expires_at"`
	ID        string `json:"id"`
}

func (q *Queries) SlideSession(ctx context.Context, arg SlideSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, slideSession, arg.ExpiresAt, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.CreatedAt,
		&i.LastSeen,
		&i.ExpiresAt,
	)
	return i, err
}

const touchSession = `-- name: TouchSession :one
UPDATE sessions
SET last_seen = strftime('%Y-%m-%dT%H:%M:%fZ','now')
WHERE id = ?1
RETURNING id, userid, created_at, last_seen, expires_at
`

func (q *Queries) TouchSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, touchSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.CreatedAt,
		&i.LastSeen,
		&i.ExpiresAt,
	)
	return i, err
}
