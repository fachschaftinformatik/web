//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for UserActive.
const (
	UserActiveN0 UserActive = 0
	UserActiveN1 UserActive = 1
)

// Defines values for UserRole.
const (
	UserRoleAdmin  UserRole = "admin"
	UserRoleEditor UserRole = "editor"
	UserRoleUser   UserRole = "user"
)

// Defines values for UserVerified.
const (
	UserVerifiedN0 UserVerified = 0
	UserVerifiedN1 UserVerified = 1
)

// Error defines model for Error.
type Error struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// User defines model for User.
type User struct {
	Active       UserActive          `json:"active"`
	Campusid     int                 `json:"campusid"`
	CreatedAt    time.Time           `json:"created_at"`
	Disciplineid int                 `json:"disciplineid"`
	Email        openapi_types.Email `json:"email"`

	// Id Version 4 UUID
	Id            string       `json:"id"`
	Name          string       `json:"name"`
	Role          UserRole     `json:"role"`
	UpdatedAt     time.Time    `json:"updated_at"`
	Verified      UserVerified `json:"verified"`
	VerifiedAt    *time.Time   `json:"verified_at"`
	VerifiedUntil *time.Time   `json:"verified_until"`
}

// UserActive defines model for User.Active.
type UserActive int

// UserRole defines model for User.Role.
type UserRole string

// UserVerified defines model for User.Verified.
type UserVerified int

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// UserRegister defines model for UserRegister.
type UserRegister struct {
	Campusid     int                 `json:"campusid"`
	Disciplineid int                 `json:"disciplineid"`
	Email        openapi_types.Email `json:"email"`
	Name         string              `json:"name"`
	Password     string              `json:"password"`
}

// CsrfHeader defines model for CsrfHeader.
type CsrfHeader = string

// PostAuthLogoutParams defines parameters for PostAuthLogout.
type PostAuthLogoutParams struct {
	XCSRFToken CsrfHeader `json:"X-CSRF-Token"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = UserLogin

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = UserRegister

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Issue a CSRF token
	// (GET /auth/csrf)
	GetAuthCsrf(w http.ResponseWriter, r *http.Request)
	// Log in
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request)
	// Log out
	// (POST /auth/logout)
	PostAuthLogout(w http.ResponseWriter, r *http.Request, params PostAuthLogoutParams)
	// Get current user
	// (GET /auth/me)
	GetAuthMe(w http.ResponseWriter, r *http.Request)
	// Register a user
	// (POST /auth/register)
	PostAuthRegister(w http.ResponseWriter, r *http.Request)
	// List users (restricted)
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Get user by id
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuthCsrf operation middleware
func (siw *ServerInterfaceWrapper) GetAuthCsrf(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthCsrf(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLogoutParams

	headers := r.Header

	// ------------- Required header parameter "X-CSRF-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-CSRF-Token")]; found {
		var XCSRFToken CsrfHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-CSRF-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-CSRF-Token", valueList[0], &XCSRFToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-CSRF-Token", Err: err})
			return
		}

		params.XCSRFToken = XCSRFToken

	} else {
		err := fmt.Errorf("Header parameter X-CSRF-Token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-CSRF-Token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogout(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAuthMe operation middleware
func (siw *ServerInterfaceWrapper) GetAuthMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/auth/csrf", wrapper.GetAuthCsrf)
	m.HandleFunc("POST "+options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	m.HandleFunc("POST "+options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)
	m.HandleFunc("GET "+options.BaseURL+"/auth/me", wrapper.GetAuthMe)
	m.HandleFunc("POST "+options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	m.HandleFunc("GET "+options.BaseURL+"/users", wrapper.GetUsers)
	m.HandleFunc("GET "+options.BaseURL+"/users/{id}", wrapper.GetUsersId)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYbW/bNhD+KwS3DxugxHKSFZi+bVlfgmXD0CzDgMAIGPGkXCuRKkllFQL99+FI2ZJt",
	"WXGapkW/WSJ5x3ue517ke57qstIKlLM8uee3ICQY//MC3KnW7xHowaa3UAr65ZoKeMKtM6hy3rZtxCth",
	"RAmuO3dqTfbGm6EnVDzprPKIK1HS4X8PTi/evjr4W78HxSNu4EONBiRPnKkhmnYWFr2nl8Zo76QyugLj",
	"EPxrWL7eOB3xEqwVOYxZHt7iqjPRH1hEywP65h2kjoxdWhhxLlKHd94DqLrkyVUczfvTqBzkYOh4Ksqq",
	"tigHlxmuGhAO5LVwtJ5pU9IvLoWDA4cl8Gg7Ook2xapABbusQimwWDMY3owYCyYk2NRg5VATjf+AsagV",
	"O2GXl2e/jZ0K/I4gb3QBwWAm6oI819YrokNp9SjReeSFLFENcO9N1ZV8NDR3YDBDkHvwstw6ZV/VRSFu",
	"KKIg2J3+rmvlNhB/hJ0NUaLk0Yowj3SHa7RU3SDQgcA2lLEmrjU4d6n8XOeUxlt5tr+aKmHtf9rIPTKv",
	"M7E6setSbyFH68ZScDqzPmuWLPVeojoHlbtbnswfCH+49UW0Jxod2ys7u9ndhotqJqS1QddcUO3sQPKl",
	"/Zea7tFV6fCqr9LX12+0dQcWLGV9H76o8HdoQjVGlWmPIrqiWwsqtKFkxIfzw5gg0BUoWkz48WF8eOyD",
	"cbf+KjNRu9tZak1GTzn4vCNCBdWdM8kT/hocXZVai+8XttLKhkCO4jjEoxwof1RUVYGpPzx7Z7Va718b",
	"Wum8TtPgd40gS3Jaq5DU1pijtsbQ2trn4XpLPeh76vcGMp7w72Z9C551m2d9823bIYM8uVpE3NZlKUzD",
	"E35GXphgvWPiSeSWru3ZXdDxAHGxymNtR0D+S1uPckj3gABY96uWzaMQHour69qzvpy06yBTAWyfSO1D",
	"jscYO9d5DpL5gJ/OVMRP4vlnu3OYb0YufabuRIGSpQYkKIeisHxKJec6DxFOKEPXbi9p0L71ke9qPIp+",
	"y2wwEraLLZJPtieNjpXg65uh5U/tGMFJlKTUVDdJWS+7V4t2i6UQ8S6aQrOZqpB/AP8KSXRaGwPKMT/E",
	"fSNovwbH0uG9d8NuhqPGZH6shpLnq54rF3sV0Pmzc0/vWTdRBu7jL1cAK9EUWnR+f35+vy9pHmOiMCBk",
	"w+AjWjddeZdsMTEhMlqxU5l96TdsVV0/tX2owTT90FZgiVRC+kBXn1zHRxEvxUcs6fvn6KcXEc2i4Wm+",
	"/SXURuMOdJZZ2OEhHpiMR0wunlib0EFp9xNqP60aI5rRzo/WMZ2xgL5X0PHzK+iVNjcoJahH9ga6rL8p",
	"+8EAjampA/njQE9BIwNBze5Rtg+q6kzu0BWN5z3r/kNj//9pFl+hCV2ums/Jl2k+ma7VJzQdIofdNMxD",
	"usXeQ9ba/wMAAP//gOLqtLITAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
